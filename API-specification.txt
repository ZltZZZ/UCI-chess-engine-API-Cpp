* Before using recommended to read Description of the universal chess interface (UCI). 
https://www.shredderchess.com/download/div/uci.zip


Description of the API for UCI chess engine   January 2023
==========================================================

* Requirements: Windows, C++

* API provides low-level communication with UCI chess engine for programms on C++. It allows you to load and close engine application, send and recieve row messages from engine, synchronize engine and programm.
So, main class UCI_Engine can be inherited to define more complex functions and new fields. All you need is to include UCI_API.h and UCI_API.cpp in your project.

Main class: 
----------
	UCI_Engine

Public fields:
-------------
	1) std::wstring path_to_engine;
		Description: wstring, which contains path to .exe file of engine. Has value L"" by default.

Private fields:
--------------
	1) engine_state state;
		Description: Current state of engine. Has value NOT_LOADED by default.

Public functions:
----------------
	1) engine_error load();
		Description: Load UCI chess Engine. Runs the .exe file, along the path from path_to_engine. Sets state as WORKING.
		Returns: ENGINE_OK (.exe file was successfully loaded)
			 ENGINE_LOAD_FAIL (.exe file wasn't loaded due to some reasons (e.g. incorrect OS, file doesn't exist and others))

	2) void close();
		Description: Closes the engine's application, that was started via load(), by sending the "quit" command. Sets state as NOT_LOADED.

	3) template<typename Command, typename... Other>
	   engine_error send_command(Command, Other...);
		Description: Send some command to engine. It builds a string from second and(or) other parameters, then sends this string to engine. So, you can send any command you want.
		First and(or) other (optional) parameters: 
				 members from engine_command_word 
				 and(or) std::string/char*/const char* (some custom command) 
				 and(or) int/float (some number)
		Returns: ENGINE_OK (command is correct and was successfully send to engine)
			 ENGINE_INCORRECT_COMMAND (incorrect command (were passed some unsupported types))
		Example: engine.send_command(_uci); 		// "uci\n"
			 engine.send_command(_debug, _on); 	// "debug on\n"
			 engine.send_command("Hello world!\n"); // "Hello world!\n"
			 engine.send_command("Hello world!"); 	// "Hello world!\n"
			 engine.send_command(_go, _movestogo, "e4 e5", _movetime, 2000); // "go movestogo e4 e5 movetime 2000\n"
		Note: Function supports ONLY int and float as numeric types, other numeric types will be treated as ENGINE_INCORRECT_COMMAND;
		      As described in UCI interface specification, command must be terminated with '\n', so function puts '\n' at the end automatically, no need to put '\n' by yourself (but you can).
		      

	4) engine_error wait_answ();
	   engine_error wait_answ(int);
		Description: Busy waits until a response (character, string) comes from the engine.
		First parameter (optional): max time of waiting (in ms). Uses WAITING_TIME by default if first parameter isn't set. 
	  	Returns: ENGINE_OK (response was come and some message from engine is available to read)
			 ENGINE_TIMEOUT (response wasn't recieved in int/WAITING_TIME seconds, nothing to read from engine)

	5) bool check_answ();
		Description: Check, if some message is available to read from engine.
		Returns: true (some message can be read from engine)
			 false (nothing to read from engine)
	
	6) std::string get_answ_string();
		Description: Returns message from engine, no more then MAX_MSG_SIZE bytes.
		Returns: message from engine in the form of std::string.
		Note: Recommended to call that func after check_answ() returns true or wait_answ() returns ENGINE_OK. If nothing to read from engine, then behaviour of func is undefined.

	7) char get_answ_char();
		Description: Returns only one char from message from engine.
		Returns: one char from message from engine.
		Note: Recommended to call that func after check_answ() returns true or wait_answ() returns ENGINE_OK. If nothing to read from engine, then behaviour of func is undefined.

	8) engine_state get_state();
		Decription: Returns current state of engine.
		Returns: NOT_LOADED (engine application was terminated by close() or not loaded by load())
			 WORKING (engine application is runing and ready to be used)


Enums:
-----
	1) engine_state:
		NOT_LOADED
		WORKING
	2) engine_error:
		ENGINE_OK
		ENGINE_LOAD_FAIL
		ENGINE_INCORRECT_COMMAND
		ENGINE_INCORRECT_COMMAND_TYPE
		ENGINE_TIMEOUT
	3) engine_command_word:
		_uci
		_debug 
			_on
			_off
		_isready
		_setoption 
			_name 
			_value
		_register 
			_later 
			_code
		_ucinewgame
		_position 
			_fen,
			_startpos,
			_moves
		_go 
			_searchmoves,
			_ponder 
			_wtime 
			_btime 
			_winc
			_binc
			_movestogo,
			_depth
			_nodes
			_mate
			_movetime
			_infinite
		_stop
		_ponderhit
		_quit

Defines:
-------
	MAX_MSG_SIZE 1500
	WAITING_TIME 10
	


Example:
-------
int main() {
	UCI_Engine engn(L"C:\\stockfish_15.1_win_x64_popcnt\\stockfish-windows-2022-x86-64-modern.exe");
	std::string answer;

	// 1. Load engine and get answer
	if (engn.load() != ENGINE_OK) {
		std::cout << "Can't load stockfish!\n";
		exit(-1);
	}

	if (engn.wait_answ(1000) != ENGINE_OK) {
		std::cout << "Stockfish didn't answer on load, but must!\n";
		engn.close();
		exit(-2);
	}
	answer = engn.get_answ_string();
	std::cout << answer;

	// 2. Tell engine to use the uci, get answer
	engn.send_command(_uci);
	if (engn.wait_answ(1000) != ENGINE_OK) {
		std::cout << "UCI interface not supported or engine isn't working!\n";
		engn.close();
		exit(-3);
	}

	answer = engn.get_answ_string();
	std::cout << answer << std::endl;

	// 3. Required once before the engine is asked to do any search, get answer "readyok" 
	engn.send_command(_isready);
	if (engn.wait_answ() != ENGINE_OK) {
		std::cout << "Engine isn't ready or isn't working!\n";
		engn.close();
		exit(-4);
	}

	answer = engn.get_answ_string();
	std::cout << answer << std::endl;

	if (answer != "readyok") {
		std::cout << "it is not UCI engine :D \n";
		engn.close();
		exit(-5);
	}

	// 4. Use the engine for its intended purpose
	engn.send_command(_go, _movetime, 5000, _movestogo, "e4 e5");
	Sleep(5000);

	while (engn.check_answ())
	{
		char c = engn.get_answ_char();
		std::cout << c;
	}

	engn.close();

	return 0;
}

Output:
------
Stockfish 15.1 by the Stockfish developers (see AUTHORS file)
id name Stockfish 15.1
id author the Stockfish developers (see AUTHORS file)

option name Debug Log File type string default
option name Threads type spin default 1 min 1 max 1024
option name Hash type spin default 16 min 1 max 33554432
option name Clear Hash type button
option name Ponder type check default false
option name MultiPV type spin default 1 min 1 max 500
option name Skill Level type spin default 20 min 0 max 20
option name Move Overhead type spin default 10 min 0 max 5000
option name Slow Mover type spin default 100 min 10 max 1000
option name nodestime type spin default 0 min 0 max 10000
option name UCI_Chess960 type check default false
option name UCI_AnalyseMode type check default false
option name UCI_LimitStrength type check default false
option name UCI_Elo type spin default 1350 min 1350 max 2850
option name UCI_ShowWDL type check default false
option name SyzygyPath type string default <empty>
option name SyzygyProbeDepth type spin default 1 min 1 max 100
option name Syzygy50MoveRule type check default true
option name SyzygyProbeLimit type spin default 7 min 0 max 7
option name Use NNUE type check default true
option name EvalFile type string default nn-ad9b42354671.nnue
uciok

readyok

info string NNUE evaluation using nn-ad9b42354671.nnue enabled
info depth 1 seldepth 1 multipv 1 score cp 18 nodes 1 nps 1000 hashfull 0 tbhits 0 time 1 pv e2e4
info depth 2 seldepth 2 multipv 1 score cp 18 nodes 2 nps 2000 hashfull 0 tbhits 0 time 1 pv e2e4
info depth 3 seldepth 2 multipv 1 score cp 18 nodes 3 nps 3000 hashfull 0 tbhits 0 time 1 pv e2e4
info depth 4 seldepth 2 multipv 1 score cp 18 nodes 4 nps 4000 hashfull 0 tbhits 0 time 1 pv e2e4
bestmove e2e4

	
